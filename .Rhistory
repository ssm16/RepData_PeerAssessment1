plot(x,y,pch=19, col=rgb(0,0.5,0.5))
plot(x,y,pch=19, col=rgb(0,0.5,0.5,0.3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col=drv)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", colour="manufacturer")
qplot(drv, hwy, data=mpg, geom="boxplot", colour=manufacturer)
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
play()
qplot(drv, hwy, data=mpg, geom="boxplot", color=disp)
qplot(drv, hwy, data=mpg, geom="boxplot", color=displ)
class(displ)
head(mpg)
mpg$displ
qplot(drv, hwy, data=mpg, geom="boxplot", color=displ)
nxt()
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets=.~drv)
g<-ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l", ylim=c(-3,3))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
play()
plot(myx,myy,type="l"
)
nxt()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut
)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut
)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut)+ geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut,facets=.~cut)+ geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0,1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_points(alpha=1/3)+facet_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight~Time|Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
qplot(Wind, Ozone, data=airquality)+geom_smooth()
library(swirl)
swirl()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col="cm.colors(25)")
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"),pc=3,cex=2,lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$Cluster, pch=19,cex=2)
plot(x,y,col=kmObj$cluster, pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-(svd$u[,1]*svd$d[1])%*%t(svd$v[,1])
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2<-svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd, subject=1)
sub1<-subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(c(sub1[,10:12],maxCon))
mdist<-dist(c(sub$v1[,10:12],maxCon))
mdist<-dist(c(sub1$v[,10:12],maxCon))
mdist<-dist(sub1$v[,c(10:12,maxCon)])
mdist<-dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-x1<0
sum(negative, na.rm=TRUE)
mean(negative,na.rm=TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both<-intersect(site0, site1)
both
head(pm0)
cnt0<-subset(pm0, pm0$State.Code==36&pm0$county.site%in%both)
cnt0<-subset(pm0, State.Code==36 & county.site%in%both)
cnt1<-subset(pm1, State.Code==36 & county.site%in%both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub<-subset(cnt0[County.Code==63&Site.ID==2008])
pm0sub<-subset(cnt0,County.Code==63&Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63&Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(median(x0sub, na.rm=TRUE), lwd=2)
abline(lwd=2, median(x0sub, na.rm=TRUE))
abline(lwd=2, h=median(x0sub, na.rm=TRUE))
plot(dates1, x1sub, pch=20)
abline(lwd=2, h=median(x1sub, na.rm=TRUE))
rng<-range(x0sub, x1sub, na.rm=TRUE)
rng
mn0<-with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE)
)
str(mn0)
mn1<-with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0), mean=mn0)
d1<-data.frame(state=names(mn1), mean=mn1)
mrg<-merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2]), xlim=c(.5,2.5))
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5))
)
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52),mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x<mrg$mean.y,]
library(swirl)
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
library(swirl)
swirl()
1-(2+1)/36
deck
13*4
52/4
4/52
0
12/52
2/51
1.6*0.8/2
0.64
mypdf
integrate(mypdf, lower=0, upper=1.6)
1
sqrt(2)
library(swirl)
swirl()
99.7*.001
99.7%*.001
0.997*.001
(1-0.985)*(1-.001)
0.997*.001/(0.997*.001+(1-0.985)*(1-.001))
library(swirl)
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
library(swirl)
swirl()
dice_sqr
ex2_fair<-sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
ppois(10, lambda=5*3)
library(swirl)
swirl()
1-choose(5,0)*0.8^0*0.2^5-choose(5,1)*0.8^1*0.2^4-choose(5,2)*0.8^2*0.2^3
pbinom(2,5,0.8,lower.tail=FALSE)
qnorm(0.1)
0
qnorm(0.975,mu=3,sd=2)
qnorm(0.975,mean=3,sd=2)
3+2*1.96
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50,lower.tail=TRUE)
.53
.53
ppois(3,mean=2.5*4)
ppois(3,lambda = 2.5*4)
pbinom(5,1000,0.1)
pbinom(5,1000,0.01)
ppois(5,lambda=1000*0.01)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot(2)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference<-g2-g1
mean(difference)
s<-sd(difference)
mn+c(-1,1)*qt(.95,9)*s/sqrt(10)
mn+c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp<-7*15.34^2+0*18.23^2
sp<-7*15.34^2+20*18.23^2
ns<-27
sp<-sqrt(sp/ns)
(132.86-127.44)+c(-1,1)*qt(.975,27)*sp
(132.86-127.44)+c(-1,1)*qt(.975,27,ns)*sp*sqrt(1/8+1/21)
(132.86-127.44)+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp<-sqrt((var(g1)*1/10+var(g2)*1/10)/18)
sp<-sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp/sqrt(1/10+1/10)
md+c(-1,1)*qt(.975,18)*sp/sqrt(1/5)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2-g1, paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1, paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1, paired=TRUE)$conf
num<-(15.34^2/8+18.23^2/21)^2
den<-15.34^4/8^2/7+18.23^4/21^2/20
mydf<-num/den
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
library(swirl)
swirl()
10/sqrt(100)
(32-30)/10/sqrt(100)
(32-30)/(10/sqrt(100))
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
library(swirl)
swirl()
swirl()
pt(q=2.5,df=15,lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, lower.tail=TRUE)
pbinom(7, size=8, lower.tail=TRUE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9, lambda=5, lower.tail=FALSE)
library(swirl)
swirl()
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n=16, delta=2/4,sd=1,type="one.sample",alt="one.sided")$power
power.t.test(n=16, delta=2,sd=4,type="one.sample",alt="one.sided")$power
power.t.test(n=16, delta=100,sd=200,type="one.sample",alt="one.sided")$power
power.t.test(power=.8,delta=2/4,sd=1,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=2,sd=4,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=100,sd=200,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,n=26,sd=1,type="one.sample",alt="one.sided")$delta
power.t.test(power=.8,n=27,sd=1,type="one.sample",alt="one.sided")$delta
library(swirl)
swirl()
head(pValues)
sum(pValues<0.05)
sum(p.adjust(pValues,method="bonferroni"))
sum(p.adjust(pValues,method="bonferroni")<0.05)
sum(p.adjust(pValues,method="BH")<0.05)
tail(trueStatus)
table(pValues2<0.05,trueStatus)
24/500
table(p.adjust(pValues2,method="bonferroni")<0.05,trueStatus)
table(p.adjust(pValues2,method="BH")<0.05,trueStatus)
setwd("~/Stamm/Sabine/coursera/git-repos/Reproducible Research/RepData_PeerAssessment1")
activity_data
activity_data<-read.csv(unzip("activity.zip","activity.csv"), header=TRUE)
activity_data
unique(activity_data$interval)
table(activity_data$interval)
activity_per_interval<-tapply(activity_data$steps,activity_data$interval,FUN=mean,na.rm=TRUE)
plot(as.integer(names(activity_per_interval)),activity_per_interval, type="l")
plot(as.integer(names(activity_per_interval)),activity_per_interval, type="l", xlab="Time interval coded as HHMM", ylab="Average number of steps")
activity_per_day<-tapply(activity_data$steps,activity_data$date,FUN=sum,na.rm=TRUE)
hist(activity_per_day)
hist(activity_per_day, xlab="Total steps per day", main="Histogram of total steps per day")
plot(as.integer(names(activity_per_interval)),activity_per_interval, type="l",
xlab="Time interval coded as HHMM", ylab="Average number of steps",
main="Average daily activity pattern")
names(max(activity_per_interval))
max(activity_per_interval)
activity_per_interval
which.max(activity_per_interval)
which(activity_per_interval==max(activity_per_interval,na.rm=TRUE))
class(which.max(activity_per_interval))
which.max(activity_per_interval)[2]
which.max(activity_per_interval)[1]
which.is.max(activity_per_interval)
row(activity_per_interval)[activity_per_interval==max(activity_per_interval)]
activity_per_interval[activity_per_interval==max(activity_per_interval)]
sum(is.na(activity_data$steps))
table(is.na(activity_data))
sum(is.na(activity_data$date))
sum(is.na(activity_data$interval))
table(sum(is.na(activity_data)))
table(sum(is.na(activity_data)))
summarise(activity_data,is.na)
library(dplyr)
summarise(activity_data,is.na)
summarise(activity_data,is.na())
sum(is.na(activity_data$steps))
mean(is.na(activity_data$steps))
sum(!is.na(activity_data$steps))
test<-activity_data
test <- within(test, steps <- ifelse(is.na(steps), 55555, steps))
head(test)
tail(test)
test
test<-activity_data
test
test <- within(test, steps <- ifelse(is.na(steps), 55555, steps))
test[1000:1500,]
activity_per_interval
activity_per_interval[2010]
rowname(activity_per_interval[2])
rownames(activity_per_interval[2])
activity_per_interval[2]
names(activity_per_interval[2])
test <- within(test, steps <- ifelse(is.na(steps), activity_per_interval[names(activity_per_interval=="test$interval")], steps))
head(test)
test<-activity_data
test <- within(test, steps <- ifelse(is.na(steps), activity_per_interval[names(activity_per_interval=="test$interval")], steps))
head(test)
activity_per_interval
activity_filled <- within(activity_filled, steps <- ifelse(is.na(steps), activity_per_interval[names(activity_per_interval=="test$interval")], steps))
activity_filled<-activity_data
activity_filled <- within(activity_filled, steps <- ifelse(is.na(steps), activity_per_interval[names(activity_per_interval=="test$interval")], steps))
head(activity_filled)
